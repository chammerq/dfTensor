// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sparse_als_cp
Rcpp::List sparse_als_cp(Rcpp::List& Factors, const Eigen::MatrixXi& coord, const Eigen::VectorXd& qty, const Rcpp::NumericVector& number_iterations, const Rcpp::NumericVector& lambdas_etc, const Rcpp::NumericVector& UpdateThese, int DIM);
RcppExport SEXP _dfTensor_sparse_als_cp(SEXP FactorsSEXP, SEXP coordSEXP, SEXP qtySEXP, SEXP number_iterationsSEXP, SEXP lambdas_etcSEXP, SEXP UpdateTheseSEXP, SEXP DIMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type Factors(FactorsSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type coord(coordSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type qty(qtySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type number_iterations(number_iterationsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambdas_etc(lambdas_etcSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type UpdateThese(UpdateTheseSEXP);
    Rcpp::traits::input_parameter< int >::type DIM(DIMSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_als_cp(Factors, coord, qty, number_iterations, lambdas_etc, UpdateThese, DIM));
    return rcpp_result_gen;
END_RCPP
}
// sparse_als_wt_cp
Rcpp::List sparse_als_wt_cp(Rcpp::List& Factors, const Eigen::MatrixXi& coord, const Eigen::VectorXd& qty, const Eigen::VectorXd& wt, const Rcpp::NumericVector& number_iterations, const Rcpp::NumericVector& lambdas_etc, const Rcpp::NumericVector& UpdateThese, int DIM);
RcppExport SEXP _dfTensor_sparse_als_wt_cp(SEXP FactorsSEXP, SEXP coordSEXP, SEXP qtySEXP, SEXP wtSEXP, SEXP number_iterationsSEXP, SEXP lambdas_etcSEXP, SEXP UpdateTheseSEXP, SEXP DIMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type Factors(FactorsSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type coord(coordSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type qty(qtySEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type number_iterations(number_iterationsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambdas_etc(lambdas_etcSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type UpdateThese(UpdateTheseSEXP);
    Rcpp::traits::input_parameter< int >::type DIM(DIMSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_als_wt_cp(Factors, coord, qty, wt, number_iterations, lambdas_etc, UpdateThese, DIM));
    return rcpp_result_gen;
END_RCPP
}
// sparse_plsa_xd
Rcpp::List sparse_plsa_xd(Rcpp::List& Factors, const Eigen::MatrixXi& coord, const Eigen::VectorXd& qty, int number_iterations, const Rcpp::NumericVector& tolerances, const Rcpp::NumericVector& UpdateThese, const Rcpp::NumericVector& prior, int DIM);
RcppExport SEXP _dfTensor_sparse_plsa_xd(SEXP FactorsSEXP, SEXP coordSEXP, SEXP qtySEXP, SEXP number_iterationsSEXP, SEXP tolerancesSEXP, SEXP UpdateTheseSEXP, SEXP priorSEXP, SEXP DIMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type Factors(FactorsSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type coord(coordSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type qty(qtySEXP);
    Rcpp::traits::input_parameter< int >::type number_iterations(number_iterationsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type tolerances(tolerancesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type UpdateThese(UpdateTheseSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< int >::type DIM(DIMSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_plsa_xd(Factors, coord, qty, number_iterations, tolerances, UpdateThese, prior, DIM));
    return rcpp_result_gen;
END_RCPP
}
// ReconstructSparseTensor
Eigen::VectorXd ReconstructSparseTensor(Rcpp::List& Factors, const Eigen::MatrixXi& coord, int DIM);
RcppExport SEXP _dfTensor_ReconstructSparseTensor(SEXP FactorsSEXP, SEXP coordSEXP, SEXP DIMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type Factors(FactorsSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type coord(coordSEXP);
    Rcpp::traits::input_parameter< int >::type DIM(DIMSEXP);
    rcpp_result_gen = Rcpp::wrap(ReconstructSparseTensor(Factors, coord, DIM));
    return rcpp_result_gen;
END_RCPP
}
// Initialize
Rcpp::List Initialize(const Eigen::MatrixXi& coord, const Eigen::VectorXd& qty, int initialize_type, int decomp_type, int nlatent, const Rcpp::NumericVector& tdims, int DIM);
RcppExport SEXP _dfTensor_Initialize(SEXP coordSEXP, SEXP qtySEXP, SEXP initialize_typeSEXP, SEXP decomp_typeSEXP, SEXP nlatentSEXP, SEXP tdimsSEXP, SEXP DIMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type coord(coordSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type qty(qtySEXP);
    Rcpp::traits::input_parameter< int >::type initialize_type(initialize_typeSEXP);
    Rcpp::traits::input_parameter< int >::type decomp_type(decomp_typeSEXP);
    Rcpp::traits::input_parameter< int >::type nlatent(nlatentSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type tdims(tdimsSEXP);
    Rcpp::traits::input_parameter< int >::type DIM(DIMSEXP);
    rcpp_result_gen = Rcpp::wrap(Initialize(coord, qty, initialize_type, decomp_type, nlatent, tdims, DIM));
    return rcpp_result_gen;
END_RCPP
}
// Mean_polish
Rcpp::List Mean_polish(const Rcpp::NumericVector& dims, const Eigen::MatrixXi& coord, const Eigen::ArrayXd& qty, int numit, double abs_tol, double rel_tol, double stepsize, int DIM);
RcppExport SEXP _dfTensor_Mean_polish(SEXP dimsSEXP, SEXP coordSEXP, SEXP qtySEXP, SEXP numitSEXP, SEXP abs_tolSEXP, SEXP rel_tolSEXP, SEXP stepsizeSEXP, SEXP DIMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type coord(coordSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type qty(qtySEXP);
    Rcpp::traits::input_parameter< int >::type numit(numitSEXP);
    Rcpp::traits::input_parameter< double >::type abs_tol(abs_tolSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< double >::type stepsize(stepsizeSEXP);
    Rcpp::traits::input_parameter< int >::type DIM(DIMSEXP);
    rcpp_result_gen = Rcpp::wrap(Mean_polish(dims, coord, qty, numit, abs_tol, rel_tol, stepsize, DIM));
    return rcpp_result_gen;
END_RCPP
}
// Mean_polish_wtd
Rcpp::List Mean_polish_wtd(const Rcpp::NumericVector& dims, const Eigen::MatrixXi& coord, const Eigen::ArrayXd& qty, const Eigen::ArrayXd& wt, int numit, double abs_tol, double rel_tol, double stepsize, int DIM);
RcppExport SEXP _dfTensor_Mean_polish_wtd(SEXP dimsSEXP, SEXP coordSEXP, SEXP qtySEXP, SEXP wtSEXP, SEXP numitSEXP, SEXP abs_tolSEXP, SEXP rel_tolSEXP, SEXP stepsizeSEXP, SEXP DIMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type coord(coordSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type qty(qtySEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< int >::type numit(numitSEXP);
    Rcpp::traits::input_parameter< double >::type abs_tol(abs_tolSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< double >::type stepsize(stepsizeSEXP);
    Rcpp::traits::input_parameter< int >::type DIM(DIMSEXP);
    rcpp_result_gen = Rcpp::wrap(Mean_polish_wtd(dims, coord, qty, wt, numit, abs_tol, rel_tol, stepsize, DIM));
    return rcpp_result_gen;
END_RCPP
}
// poisson_rates
Rcpp::List poisson_rates(const Rcpp::NumericVector& dims, const Eigen::MatrixXi& coord, const Eigen::VectorXd& qty, int numit, double rel_tol, double threshold, int DIM);
RcppExport SEXP _dfTensor_poisson_rates(SEXP dimsSEXP, SEXP coordSEXP, SEXP qtySEXP, SEXP numitSEXP, SEXP rel_tolSEXP, SEXP thresholdSEXP, SEXP DIMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type coord(coordSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type qty(qtySEXP);
    Rcpp::traits::input_parameter< int >::type numit(numitSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type DIM(DIMSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_rates(dims, coord, qty, numit, rel_tol, threshold, DIM));
    return rcpp_result_gen;
END_RCPP
}
// sort_indices
Rcpp::IntegerVector sort_indices(const Eigen::MatrixXi& coord, Rcpp::List& is_unique);
RcppExport SEXP _dfTensor_sort_indices(SEXP coordSEXP, SEXP is_uniqueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type coord(coordSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type is_unique(is_uniqueSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_indices(coord, is_unique));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dfTensor_sparse_als_cp", (DL_FUNC) &_dfTensor_sparse_als_cp, 7},
    {"_dfTensor_sparse_als_wt_cp", (DL_FUNC) &_dfTensor_sparse_als_wt_cp, 8},
    {"_dfTensor_sparse_plsa_xd", (DL_FUNC) &_dfTensor_sparse_plsa_xd, 8},
    {"_dfTensor_ReconstructSparseTensor", (DL_FUNC) &_dfTensor_ReconstructSparseTensor, 3},
    {"_dfTensor_Initialize", (DL_FUNC) &_dfTensor_Initialize, 7},
    {"_dfTensor_Mean_polish", (DL_FUNC) &_dfTensor_Mean_polish, 8},
    {"_dfTensor_Mean_polish_wtd", (DL_FUNC) &_dfTensor_Mean_polish_wtd, 9},
    {"_dfTensor_poisson_rates", (DL_FUNC) &_dfTensor_poisson_rates, 7},
    {"_dfTensor_sort_indices", (DL_FUNC) &_dfTensor_sort_indices, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_dfTensor(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
